# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vX7lxKk4ixQ6lO857kCPG_cBmLTY07KP
"""

import streamlit as st
import langchain
import PyPDF2
import transformers
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.vectorstores import FAISS
import os
from langchain.llms import HuggingFaceHub, OpenAI
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationalRetrievalChain
from htmlTemplates import bot_template, user_template

os.environ["HUGGINGFACEHUB_API_TOKEN"] = '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'
os.environ["OPENAI_API_KEY"] = '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'



def get_raw_text(pdf_docs):
    text = ''
    for pdf in pdf_docs:
        pdf_reader = PyPDF2.PdfReader(pdf)
        for pages in pdf_reader.pages:
            text += pages.extract_text()
    st.write("Raw text extracted")
    return text


def get_text_chunks(text):
    text_splliter = CharacterTextSplitter(
        separator='\n',
        chunk_size=800,
        chunk_overlap=20,
        length_function=len
    )
    chunks = text_splliter.split_text(text)
    st.write("Chunks splited")
    return chunks


def get_vectorestore(text_chunks):
    embeddings = HuggingFaceEmbeddings()
    vectorestore = FAISS.from_texts(texts=text_chunks, embedding=embeddings)
    st.write("Stored to Vectorestore")
    return vectorestore


def get_conversation(vectorstore):


    #repo_id = "tiiuae/falcon-7b-instruct"
    repo_id = "google/flan-t5-xxl"

    llm = HuggingFaceHub(
        repo_id=repo_id, model_kwargs={"temperature": 0.1, "max_length": 500}
    )

    memory = ConversationBufferMemory(memory_key='chat_history', return_messages=True)
    conversation_chain = ConversationalRetrievalChain.from_llm(
        llm=llm,
        memory=memory,
        retriever=vectorstore.as_retriever()
    )
    return conversation_chain


def handle_user_input(user_question):
    response = st.session_state.conversation({'question':user_question})
    st.session_state.chat_history = response['chat_history']

    for i, message in enumerate(st.session_state.chat_history):
        if i%2==0:
            st.write(user_template.replace("{message}", message.content), unsafe_allow_html=True)

        else:
            st.write(bot_template.replace("{message}", message.content), unsafe_allow_html=True)




st.set_page_config(page_title='Chat with your PDFs', page_icon=":books:")

if 'conversation' not in st.session_state:
    st.session_state.conversation=None


st.header('Chat with your PDFs :books:')
user_question = st.text_input('Enter your query here')

if user_question:
    handle_user_input(user_question)

with st.sidebar:
    st.subheader('Your Documents')
    pdf_docs = st.file_uploader('Upload your files here and press "Process"', accept_multiple_files=True)
    if st.button('Process'):
        with st.spinner('Processing'):
          raw_text = get_raw_text(pdf_docs)

          #breaking the text into text chunks
          text_chunks = get_text_chunks(raw_text)

          #converting the chunks into embeddings and storing them in vector database
          vectorstore = get_vectorestore(text_chunks)

          #creating conversational chatbot
          st.session_state.conversation = get_conversation(vectorstore)
          st.write("Process Completed")